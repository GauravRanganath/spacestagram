{"ast":null,"code":"var _slicedToArray = require(\"/Users/gauravranganath/Desktop/Shopify Technical Challenge/spacestagram/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nfunction ___$insertStyle(css) {\n  if (!css) {\n    return;\n  }\n\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  var style = document.createElement('style');\n  style.setAttribute('type', 'text/css');\n  style.innerHTML = css;\n  document.head.appendChild(style);\n  return css;\n}\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n___$insertStyle(\".react-foldable-paragraph-v-1-0-0 {\\n  all: unset !important;\\n  width: 100%;\\n}\\n\\n.react-foldable-paragraph-v-1-0-0-handler {\\n  float: right;\\n  cursor: pointer;\\n  color: #1a73e8;\\n}\\n\\n.react-foldable-paragraph-v-1-0-0-handler:hover {\\n  color: #4694fa;\\n}\\n\\n.react-foldable-paragraph-v-1-0-0-handler:active {\\n  color: #155fbf;\\n}\");\n\nvar Ellipsis = \"...\";\nvar eleId = \"collapsible-paragraph-helper\";\n\nfunction getDummyContainer() {\n  var dummyContainer;\n  return function (width, css) {\n    if (!dummyContainer) {\n      dummyContainer = document.createElement(\"div\");\n      dummyContainer.setAttribute(\"aria-hidden\", \"true\");\n      dummyContainer.id = eleId;\n      Object.entries(dummyContainer.style).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            _value = _ref2[1];\n\n        dummyContainer.style[key] = css[key];\n      });\n      dummyContainer.style.position = \"fixed\";\n      dummyContainer.style.left = \"0\";\n      dummyContainer.style.width = \"\".concat(width, \"px\");\n      dummyContainer.style.height = \"auto\";\n      dummyContainer.style.minHeight = \"auto\";\n      dummyContainer.style.maxHeight = \"auto\";\n      dummyContainer.style.top = \"-999999px\";\n      dummyContainer.style.zIndex = \"9001\";\n      dummyContainer.style.textOverflow = \"clip\";\n      dummyContainer.style.whiteSpace = \"pre-wrap\";\n      dummyContainer.style.wordBreak = \"break-word\";\n      document.body.appendChild(dummyContainer);\n    }\n\n    if (dummyContainer.style.width !== \"\".concat(width, \"px\")) {\n      dummyContainer.style.width = \"\".concat(width, \"px\");\n    }\n\n    return dummyContainer;\n  };\n}\n\nfunction generateHandlers(locales) {\n  var button = document.createElement(\"span\");\n  button.style.display = \"inline-block\";\n  button.style.marginLeft = \"4px\";\n  var label = document.createTextNode(locales.expand);\n  button.appendChild(label);\n  return button;\n}\n\nfunction getNumberFromPixel(pixel) {\n  var _a;\n\n  return Number((_a = /\\d+/.exec(pixel)) === null || _a === void 0 ? void 0 : _a.toString());\n}\n\nfunction compute(originText, maxWidth, maxHeight, locales, controlled, css) {\n  var dummyContainer = getDummyContainer()(maxWidth, css);\n  var textNode = document.createTextNode(originText);\n  dummyContainer.appendChild(textNode);\n\n  if (dummyContainer.offsetHeight <= maxHeight) {\n    return {\n      computed: false,\n      text: originText\n    };\n  }\n\n  originText += Ellipsis;\n\n  if (!controlled) {\n    dummyContainer.appendChild(generateHandlers(locales));\n  }\n\n  var start = 0;\n  var end = originText.length - 1;\n\n  while (start + 1 < end) {\n    var mid = Math.floor((start + end) / 2);\n    var curText = originText.slice(0, mid) + Ellipsis;\n    textNode.textContent = curText;\n\n    if (dummyContainer.offsetHeight <= maxHeight) {\n      start = mid;\n    } else {\n      end = mid;\n    }\n  }\n\n  textNode.textContent = originText.slice(0, start) + Ellipsis;\n\n  if (dummyContainer.offsetHeight <= maxHeight) {\n    return {\n      text: originText.slice(0, start) + Ellipsis,\n      computed: true\n    };\n  }\n\n  return {\n    text: originText.slice(0, end) + Ellipsis,\n    computed: true\n  };\n}\n\nvar CollapsibleParagraph = function CollapsibleParagraph(_ref3) {\n  var lines = _ref3.lines,\n      children = _ref3.children,\n      locales = _ref3.locales,\n      expand = _ref3.expand,\n      handlerClassName = _ref3.handlerClassName;\n  var lastWidth = React.useRef();\n  var originalText = React.useRef();\n  var lastComputedText = React.useRef();\n  var paragraph = React.useRef(null);\n  var observer = React.useRef();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      text = _React$useState2[0],\n      setText = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      showHandler = _React$useState4[0],\n      setShowHandler = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isExpand = _React$useState6[0],\n      setIsExpand = _React$useState6[1];\n\n  var getComputedText = React.useCallback(function (originText, maxWidth, lineHeight, css) {\n    return compute(originText, maxWidth, lineHeight * lines, locales, typeof expand === \"boolean\", css);\n  }, [lines, locales, expand]);\n  var toggleExpand = React.useCallback(function () {\n    if (isExpand) {\n      setText(lastComputedText.current);\n    } else {\n      setText(originalText.current);\n    }\n\n    setIsExpand(function (isExpand) {\n      return !isExpand;\n    });\n  }, [isExpand]);\n  React.useEffect(function () {\n    if (typeof children !== \"string\") {\n      throw new Error(\"The type of children must be `string`\");\n    }\n\n    originalText.current = children;\n  }, [children]);\n  React.useEffect(function () {\n    if (paragraph.current && paragraph.current.parentElement && originalText.current) {\n      var parentStyle = window.getComputedStyle(paragraph.current.parentElement);\n      var lineHeight = parentStyle.lineHeight,\n          paddingLeft = parentStyle.paddingLeft,\n          paddingRight = parentStyle.paddingRight;\n      var lineHeightNumber;\n\n      if (lineHeight === \"normal\") {\n        lineHeightNumber = 16;\n      } else {\n        lineHeightNumber = getNumberFromPixel(lineHeight);\n      } // clear observer first\n\n\n      if (observer.current) {\n        observer.current.disconnect();\n      } // update computation when container gets resized\n\n\n      observer.current = new ResizeObserver(function (entries) {\n        if (!originalText.current) return;\n        var container = entries[0];\n        var width = container.contentRect.width;\n\n        if (lastWidth.current === width) {\n          return;\n        }\n\n        lastWidth.current = width;\n        var computed = getComputedText(originalText.current, width - getNumberFromPixel(paddingLeft) - getNumberFromPixel(paddingRight), lineHeightNumber, parentStyle);\n        setShowHandler(computed.computed);\n\n        if (!isExpand) {\n          setText(computed.text);\n        }\n\n        lastComputedText.current = computed.text;\n      }); // observe\n\n      observer.current.observe(paragraph.current.parentElement);\n    }\n\n    return function () {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [getComputedText, isExpand]);\n  return React__default['default'].createElement(\"p\", {\n    ref: paragraph,\n    className: \"react-foldable-paragraph-v-1-0-0\"\n  }, text, showHandler && typeof expand === \"undefined\" && React__default['default'].createElement(\"span\", {\n    className: \"react-foldable-paragraph-v-1-0-0-handler \".concat(handlerClassName || \"\"),\n    onClick: toggleExpand\n  }, isExpand ? locales === null || locales === void 0 ? void 0 : locales.collapse : locales === null || locales === void 0 ? void 0 : locales.expand));\n};\n\nCollapsibleParagraph.defaultProps = {\n  lines: 2,\n  locales: {\n    expand: \"expand\",\n    collapse: \"collapse\"\n  }\n};\nexports.default = CollapsibleParagraph;","map":{"version":3,"sources":["/Users/gauravranganath/Desktop/Shopify Technical Challenge/spacestagram/node_modules/src/utils.ts","/Users/gauravranganath/Desktop/Shopify Technical Challenge/spacestagram/node_modules/src/index.tsx"],"names":["useRef","useState","useCallback","useEffect","React"],"mappings":"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","sourcesContent":["import { Locale } from \".\";\n\nconst Ellipsis = \"...\";\n\nconst eleId = \"collapsible-paragraph-helper\";\n\nfunction getDummyContainer() {\n  let dummyContainer: HTMLDivElement;\n  return function (width: number, css: CSSStyleDeclaration) {\n    if (!dummyContainer) {\n      dummyContainer = document.createElement(\"div\");\n      dummyContainer.setAttribute(\"aria-hidden\", \"true\");\n      dummyContainer.id = eleId;\n      Object.entries(dummyContainer.style).forEach(([key, _value]) => {\n        dummyContainer.style[key] = css[key];\n      });\n      dummyContainer.style.position = \"fixed\";\n      dummyContainer.style.left = \"0\";\n      dummyContainer.style.width = `${width}px`;\n      dummyContainer.style.height = \"auto\";\n      dummyContainer.style.minHeight = \"auto\";\n      dummyContainer.style.maxHeight = \"auto\";\n      dummyContainer.style.top = \"-999999px\";\n      dummyContainer.style.zIndex = \"9001\";\n      dummyContainer.style.textOverflow = \"clip\";\n      dummyContainer.style.whiteSpace = \"pre-wrap\";\n      dummyContainer.style.wordBreak = \"break-word\";\n      document.body.appendChild(dummyContainer);\n    }\n    if (dummyContainer.style.width !== `${width}px`) {\n      dummyContainer.style.width = `${width}px`;\n    }\n    return dummyContainer;\n  };\n}\n\nfunction generateHandlers(locales: Locale) {\n  const button = document.createElement(\"span\");\n  button.style.display = \"inline-block\";\n  button.style.marginLeft = \"4px\";\n  const label = document.createTextNode(locales.expand);\n  button.appendChild(label);\n  return button;\n}\n\nexport function getNumberFromPixel(pixel: string): number {\n  return Number(/\\d+/.exec(pixel)?.toString());\n}\n\nexport function compute(\n  originText: string,\n  maxWidth: number,\n  maxHeight: number,\n  locales: Locale,\n  controlled: boolean,\n  css: CSSStyleDeclaration,\n) {\n  const dummyContainer = getDummyContainer()(maxWidth, css);\n  const textNode = document.createTextNode(originText);\n  dummyContainer.appendChild(textNode);\n  if (dummyContainer.offsetHeight <= maxHeight) {\n    return { computed: false, text: originText };\n  }\n\n  originText += Ellipsis;\n\n  if (!controlled) {\n    dummyContainer.appendChild(generateHandlers(locales));\n  }\n\n  let start = 0;\n  let end = originText.length - 1;\n\n  while (start + 1 < end) {\n    const mid = Math.floor((start + end) / 2);\n    const curText = originText.slice(0, mid) + Ellipsis;\n    textNode.textContent = curText;\n    if (dummyContainer.offsetHeight <= maxHeight) {\n      start = mid;\n    } else {\n      end = mid;\n    }\n  }\n  textNode.textContent = originText.slice(0, start) + Ellipsis;\n  if (dummyContainer.offsetHeight <= maxHeight) {\n    return { text: originText.slice(0, start) + Ellipsis, computed: true };\n  }\n  return { text: originText.slice(0, end) + Ellipsis, computed: true };\n}\n","import React, { FC, useCallback, useEffect, useRef, useState } from \"react\";\n\nimport \"./style.scss\";\nimport { compute, getNumberFromPixel } from \"./utils\";\n\nexport type Locale = {\n  expand: string;\n  collapse: string;\n};\n\nexport interface CollapsibleParagraphProps {\n  lines: number;\n  expand?: boolean;\n  locales?: Locale;\n  handlerClassName?: string;\n}\n\nconst CollapsibleParagraph: FC<CollapsibleParagraphProps> = ({\n  lines,\n  children,\n  locales,\n  expand,\n  handlerClassName,\n}) => {\n  const lastWidth = useRef<number>();\n  const originalText = useRef<string>();\n  const lastComputedText = useRef<string>();\n  const paragraph = useRef<HTMLParagraphElement | null>(null);\n  const observer = useRef<ResizeObserver>();\n\n  const [text, setText] = useState<string>();\n  const [showHandler, setShowHandler] = useState<boolean>(false);\n  const [isExpand, setIsExpand] = useState<boolean>(false);\n\n  const getComputedText = useCallback(\n    (\n      originText: string,\n      maxWidth: number,\n      lineHeight: number,\n      css: CSSStyleDeclaration,\n    ) => {\n      return compute(\n        originText,\n        maxWidth,\n        lineHeight * lines,\n        locales!,\n        typeof expand === \"boolean\",\n        css,\n      );\n    },\n    [lines, locales, expand],\n  );\n\n  const toggleExpand = useCallback(() => {\n    if (isExpand) {\n      setText(lastComputedText.current);\n    } else {\n      setText(originalText.current);\n    }\n    setIsExpand(isExpand => !isExpand);\n  }, [isExpand]);\n\n  useEffect(() => {\n    if (typeof children !== \"string\") {\n      throw new Error(\"The type of children must be `string`\");\n    }\n    originalText.current = children;\n  }, [children]);\n\n  useEffect(() => {\n    if (\n      paragraph.current &&\n      paragraph.current.parentElement &&\n      originalText.current\n    ) {\n      const parentStyle = window.getComputedStyle(\n        paragraph.current.parentElement,\n      );\n      let { lineHeight, paddingLeft, paddingRight } = parentStyle;\n\n      let lineHeightNumber: number;\n\n      if (lineHeight === \"normal\") {\n        lineHeightNumber = 16;\n      } else {\n        lineHeightNumber = getNumberFromPixel(lineHeight);\n      }\n\n      // clear observer first\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n\n      // update computation when container gets resized\n      observer.current = new ResizeObserver(entries => {\n        if (!originalText.current) return;\n        const container = entries[0];\n        const {\n          contentRect: { width },\n        } = container;\n\n        if (lastWidth.current === width) {\n          return;\n        }\n\n        lastWidth.current = width;\n\n        const computed = getComputedText(\n          originalText.current,\n          width -\n            getNumberFromPixel(paddingLeft) -\n            getNumberFromPixel(paddingRight),\n          lineHeightNumber,\n          parentStyle,\n        );\n\n        setShowHandler(computed.computed);\n        if (!isExpand) {\n          setText(computed.text);\n        }\n        lastComputedText.current = computed.text;\n      });\n\n      // observe\n      observer.current.observe(paragraph.current.parentElement);\n    }\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [getComputedText, isExpand]);\n\n  return (\n    <p ref={paragraph} className=\"react-foldable-paragraph-v-1-0-0\">\n      {text}\n      {showHandler && typeof expand === \"undefined\" && (\n        <span\n          className={`react-foldable-paragraph-v-1-0-0-handler ${\n            handlerClassName || \"\"\n          }`}\n          onClick={toggleExpand}\n        >\n          {isExpand ? locales?.collapse : locales?.expand}\n        </span>\n      )}\n    </p>\n  );\n};\n\nCollapsibleParagraph.defaultProps = {\n  lines: 2,\n  locales: {\n    expand: \"expand\",\n    collapse: \"collapse\",\n  },\n};\n\nexport default CollapsibleParagraph;\n"]},"metadata":{},"sourceType":"script"}